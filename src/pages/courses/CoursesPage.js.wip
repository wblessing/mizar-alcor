import React, { useContext, useEffect, useState } from 'react';
import { connect } from 'react-redux';
import * as courseActions from '../../redux/actions/courseActions';
import * as authorActions from '../../redux/actions/authorActions';
import PropTypes from 'prop-types';
import { bindActionCreators } from 'redux';
import CourseList from './CourseList';
import { Redirect } from 'react-router-dom';
import Spinner from './common/Spinner';
import { toast } from 'react-toastify';
//import 'bootstrap/dist/css/bootstrap.min.css';

import FormError from '../../components/FormError';
import FormSuccess from '../../components/FormSuccess';
import { FetchContext } from '../../context/FetchContext';

const CoursesPage = (props) => {
  const fetchContext = useContext(FetchContext);
  const [redirectToAddCoursePage, setRedirectToAddCoursePage] = useState(false);
  const [bio, setBio] = useState();
  const [courses, setCourses] = useState([]);
  const [authors, setAuthors] = useState([]);
  const [successMessage, setSuccessMessage] = useState();
  const [errorMessage, setErrorMessage] = useState();

  useEffect(() => {
    const getCourses = async () => {
      try {
        const { courses } = await fetchContext.authAxios.get('get-courses');
        console.log('courses ' + courses);
        setCourses(courses);
        console.log('hello');
      } catch (err) {
        console.log(err);
      }
    };

    const getAuthors = async () => {
      try {
        const { data } = await fetchContext.authAxios.get('api/authors');
        setAuthors(data.authors);
      } catch (err) {
        console.log(err);
      }
    };

    getCourses();
    getAuthors();
  }, [fetchContext.authAxios]);

  const handleDeleteCourse = async (course) => {
    toast.success('Course deleted');
    try {
      await this.props.actions.deleteCourse(course);
    } catch (error) {
      toast.error('Delete failed. ' + error.message, { autoClose: false });
    }
  };

  return (
    <>
      {redirectToAddCoursePage && <Redirect to="/course" />}
      <h2>Courses</h2>
      {successMessage && <FormSuccess text={successMessage} />}
      {errorMessage && <FormError text={errorMessage} />}
      {props.loading ? (
        <Spinner />
      ) : (
        <>
          <button
            style={{ marginBottom: 20 }}
            className="btn btn-primary add-course"
            onClick={() => setRedirectToAddCoursePage(true)}
          >
            Add Course
          </button>

          <CourseList
            onDeleteClick={handleDeleteCourse}
            courses={props.courses}
          />
        </>
      )}
    </>
  );
};

CoursesPage.propTypes = {
  authors: PropTypes.array.isRequired,
  courses: PropTypes.array.isRequired,
  actions: PropTypes.object.isRequired,
  loading: PropTypes.bool.isRequired,
  accessToken: PropTypes.string.isRequired,
};

function mapStateToProps(state) {
  return {
    courses:
      state.authors.length === 0
        ? []
        : state.courses.map((course) => {
            return {
              ...course,
              authorName: state.authors.find((a) => a.id === course.authorId)
                .name,
            };
          }),
    authors: state.authors,
    loading: state.apiCallsInProgress > 0,
  };
}

function mapDispatchToProps(dispatch) {
  return {
    actions: {
      loadCourses: bindActionCreators(courseActions.loadCourses, dispatch),
      loadAuthors: bindActionCreators(authorActions.loadAuthors, dispatch),
      deleteCourse: bindActionCreators(courseActions.deleteCourse, dispatch),
    },
  };
}

export default connect(mapStateToProps, mapDispatchToProps)(CoursesPage);
